{"version":3,"sources":["libs/http.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/Modal/index.jsx","components/Modal/Modal.module.scss","components/CreatePost/CreatePost.module.scss","components/CreatePost/index.jsx","pages/NewPost/index.jsx"],"names":["BASE_URL","http","resource","fetch","then","response","json","httpPOST","data","method","headers","body","JSON","stringify","httpDELETE","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Modal","bgColor","text","className","styles","style","background","module","exports","initPost","formPostObj","author","date","Date","toISOString","photo","isModalVisible","reducer","state","action","type","key","payload","CreatePost","useReducer","dispatch","useEffect","createPost","__author","value","onChange","e","target","name","id","placeholder","required","cols","rows","onClick","event","preventDefault","NewPost"],"mappings":"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","file":"static/js/6.b1611adb.chunk.js","sourcesContent":["const BASE_URL = \"https://edgemony-backend.herokuapp.com\";\n\nconst http = (resource) =>\n  fetch(BASE_URL + resource).then((response) => response.json());\n\nconst httpPOST = (resource, data) =>\n  fetch(BASE_URL + resource, {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  }).then((response) => response.json());\n\nconst httpDELETE = (resource) =>\n  fetch(BASE_URL + resource, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  }).then((response) => response.json());\n\n// Popola la lista degli amici, in base alla lista friendsNames\nconst fillFriendsList = (friendsNames) => {\n  let value = 0;\n  for (value in [...Array(friendsNames.length).keys()]) {\n    httpPOST(\"/friends\", {\n      name: friendsNames[value],\n      photo: `https://randomuser.me/api/portraits/men/${value}.jpg`,\n    });\n\n    setTimeout(() => {}, 100);\n  }\n};\n\nexport { http, httpPOST, httpDELETE, fillFriendsList };","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import styles from \"./Modal.module.scss\";\n\nconst Modal = ({ bgColor, text }) => {\n  return (\n    <div className={styles.Modal} style={{ background: `${bgColor}` }}>\n      <p>{text}</p>\n    </div>\n  );\n};\n\nexport default Modal;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__32mLz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createPost\":\"CreatePost_createPost__3XCbM\",\"__author\":\"CreatePost___author__2lcbm\"};","import { useEffect, useReducer } from \"react\";\nimport { httpPOST } from \"../../libs/http\";\nimport Modal from \"./../Modal\";\nimport styles from \"./CreatePost.module.scss\";\n\nconst initPost = {\n  formPostObj: {\n    author: \"\",\n    text: \"\",\n    date: new Date().toISOString(),\n    photo: \"\",\n  },\n  isModalVisible: false,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"update_form\":\n      return {\n        ...state,\n        formPostObj: { ...state.formPostObj, [action.key]: action.payload },\n      };\n    case \"modal\":\n      return { ...state, isModalVisible: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst CreatePost = () => {\n  const [state, dispatch] = useReducer(reducer, initPost);\n\n  const handleSendBtn = (event) => {\n    event.preventDefault();\n    httpPOST(\"/posts\", state.formPostObj);\n    dispatch({ type: \"modal\", payload: !state.isModalVisible });\n  };\n\n  useEffect(() => {\n    dispatch({ type: \"modal\", payload: false });\n  }, [state.formPostObj]);\n\n  return (\n    <div className={styles.createPost}>\n      <form>\n        <div className={styles.__author}>\n          <input\n            value={state.formPostObj.author}\n            onChange={(e) =>\n              dispatch({\n                type: \"update_form\",\n                key: \"author\",\n                payload: e.target.value,\n              })\n            }\n            name=\"author\"\n            id=\"author\"\n            type=\"text\"\n            placeholder=\"Author\"\n            required\n          />\n          <input\n            value={state.formPostObj.photo}\n            onChange={(e) =>\n              dispatch({\n                type: \"update_form\",\n                key: \"photo\",\n                payload: e.target.value,\n              })\n            }\n            name=\"img\"\n            id=\"img\"\n            type=\"text\"\n            placeholder=\"Img URL\"\n          />\n        </div>\n        <textarea\n          value={state.formPostObj.text}\n          onChange={(e) =>\n            dispatch({\n              type: \"update_form\",\n              key: \"text\",\n              payload: e.target.value,\n            })\n          }\n          name=\"message\"\n          id=\"message\"\n          cols=\"30\"\n          rows=\"10\"\n          placeholder=\"Message\"\n          required\n        ></textarea>\n        <button type=\"submit\" onClick={handleSendBtn}>\n          SEND\n        </button>\n        {state.isModalVisible && (\n          <Modal bgColor=\"lightskyblue\" text=\"Il post Ã¨ stato aggiunto\" />\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default CreatePost;\n","import CreatePost from \"../../components/CreatePost\";\n\nconst NewPost = () => {\n    return (\n        <CreatePost />\n    )\n}\n\nexport default NewPost;"],"sourceRoot":""}